datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model UserData {
  userId          String @id @unique
  aiRequestsCount Int    @default(0)

  userSubscription UserSubscription?
  goals            Goal[]
  goalPosts        GoalPost[]
  stressLevels     StressLevel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  userId   String   @unique
  userData UserData @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model CompanionCategory {
  id   String @id @default(uuid())
  name String

  companions Companion[]
}

model Companion {
  id           String @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String
  description  String @db.Text
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goals Goal[]

  categoryId String
  category   CompanionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model Goal {
  id                 String   @id @default(cuid())
  title              String
  description        String   @db.Text
  reasons            String[]
  accomplishCriteria String

  createdAt DateTime @default(now())

  goalStatus   GoalStatus
  goalPosts    GoalPost[]
  stressLevels StressLevel[]

  userId      String
  userData    UserData   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  companionId String?
  companion   Companion? @relation(fields: [companionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([companionId])
}

enum GoalStatus {
  archived
  current
  achieved
}

model GoalPost {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role     Role
  postType GoalPostType

  userId        String
  userData      UserData     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  goalId        String
  goal          Goal         @relation(fields: [goalId], references: [id], onDelete: Cascade)
  stressLevelId String?      @unique
  stressLevel   StressLevel? @relation(fields: [stressLevelId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([goalId])
}

enum Role {
  user
  system
}

enum GoalPostType {
  progress
  plan
}

model StressLevel {
  id        String   @id @default(cuid())
  level     Int
  reason    String?  @db.Text
  createdAt DateTime @default(now())

  goalPost GoalPost?
  userId   String
  userData UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  goalId   String?
  goal     Goal?     @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([goalId])
}
