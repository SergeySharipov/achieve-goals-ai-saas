datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String @id @unique
  aiRequestsCount Int    @default(0)

  subscription Subscription?
  goals        Goal[]
  posts        Post[]
  stressLevel  StressLevel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                     String    @id @default(cuid())
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]
}

model Companion {
  id           String @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String
  description  String @db.Text
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Goal Goal[]

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([categoryId])
}

model Goal {
  id                 String   @id @default(cuid())
  title              String
  description        String   @db.Text
  reasons            String[]
  accomplishCriteria String

  createdDate DateTime @default(now())

  goalStatus   GoalStatus
  posts        Post[]
  stressLevels StressLevel[]

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  companionId String?
  companion   Companion? @relation(fields: [companionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([companionId])
}

enum GoalStatus {
  archived
  current
  achieved
}

model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role     Role
  postType PostType

  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId        String
  goal          Goal         @relation(fields: [goalId], references: [id], onDelete: Cascade)
  stressLevelId String?      @unique
  stressLevel   StressLevel? @relation(fields: [stressLevelId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([goalId])
}

enum Role {
  user
  system
}

enum PostType {
  progress
  plan
}

model StressLevel {
  id        String   @id @default(cuid())
  level     Int
  reason    String?  @db.Text
  createdAt DateTime @default(now())

  post   Post?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId String?
  goal   Goal?   @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([goalId])
}
